@startuml c4_level1
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

title AutoLogger - Sistema de Gestão de Histórico Veicular com Blockchain

LAYOUT_TOP_DOWN()

Person(owner, "Proprietário de Veículo", "Usuário que cadastra e gerencia histórico de manutenções, despesas e eventos do veículo")
Person(buyer, "Comprador Potencial", "Pessoa interessada em verificar o histórico autêntico do veículo antes da compra")

System_Boundary(autologger_system, "Sistema AutoLogger") {
    System(autologger, "AutoLogger", "Plataforma web para gestão de histórico veicular com registro imutável em blockchain")
}

System_Ext(ethereum, "Rede Ethereum (Sepolia)", "Blockchain pública para registro imutável de hashes dos eventos veiculares")
System_Ext(email_service, "Serviço de Email", "Envio de notificações e recuperação de senha")
System_Ext(cloud_storage, "Armazenamento em Nuvem", "Storage para imagens e documentos PDF dos eventos")

Rel(owner, autologger, "Cadastra eventos, gerencia veículos e visualiza relatórios", "HTTPS")
Rel(buyer, autologger, "Consulta histórico verificado do veículo", "HTTPS")
Rel(autologger, ethereum, "Registra hash SHA-256 dos eventos confirmados", "Web3/RPC")
Rel(autologger, email_service, "Envia notificações e emails", "SMTP/API")
Rel(autologger, cloud_storage, "Armazena arquivos de comprovação", "REST API")

SHOW_LEGEND()
@enduml

@startuml c4_level2
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

title AutoLogger - Diagrama de Containers

LAYOUT_TOP_DOWN()

Person(user, "Usuário", "Proprietário de veículo ou comprador interessado")

System_Boundary(autologger_boundary, "Sistema AutoLogger") {
    Container(frontend, "Frontend Web", "React + TypeScript", "Interface responsiva que permite acesso ao sistema de gestão veicular.")
    
    Container(user_module, "User Module", "NestJS", "Gerencia cadastro, autenticação, edição e exclusão de usuários")
    
    Container(vehicle_module, "Vehicle Module", "NestJS", "Gerencia CRUD de veículos")
    
    Container(event_module, "Event Module", "NestJS", "Gerencia eventos veiculares, gera hash SHA-256 e controla edição")
    
    Container(report_module, "Report Module", "NestJS", "Gera relatórios, estatísticas e gráficos")
    
    Container(blockchain_module, "Blockchain Module", "NestJS + Ethers.js", "Interage com contratos inteligentes, confirma transações")
    
    Container(file_module, "File Module", "NestJS", "Gerencia upload de arquivos e integração com storage")
    
    ContainerDb(main_db, "Banco Principal", "PostgreSQL", "Armazena usuários, veículos, eventos e metadados de arquivos")
    
    ContainerDb(cache_db, "Cache", "Redis", "Cache de sessões JWT e consultas frequentes")
    
    Container(smart_contracts, "Smart Contracts", "Solidity", "Contratos na rede Sepolia para registro imutável")
}

System_Ext(ethereum_net, "Rede Ethereum (Sepolia)", "Blockchain para registro de hashes")
System_Ext(email_ext, "Serviço de Email", "Notificações por email")
System_Ext(storage_ext, "Cloud Storage", "Armazenamento de arquivos")

Rel(user, frontend, "Acessa via navegador", "HTTPS")

Rel(frontend, user_module, "Requisições de usuário", "HTTPS/JSON")
Rel(frontend, vehicle_module, "Requisições de veículo", "HTTPS/JSON")
Rel(frontend, event_module, "Requisições de eventos", "HTTPS/JSON")
Rel(frontend, report_module, "Requisições de relatórios", "HTTPS/JSON")
Rel(frontend, file_module, "Uploads e downloads", "HTTPS/JSON")

Rel(user_module, main_db, "CRUD usuários", "TypeORM/SQL")
Rel(vehicle_module, main_db, "CRUD veículos", "TypeORM/SQL")
Rel(event_module, main_db, "CRUD eventos", "TypeORM/SQL")
Rel(report_module, main_db, "Consultas relatórios", "TypeORM/SQL")
Rel(file_module, main_db, "Metadados arquivos", "TypeORM/SQL")

Rel(user_module, cache_db, "Sessões JWT", "Redis")

Rel(event_module, blockchain_module, "Solicita registro hash", "NestJS/HTTP")
Rel(blockchain_module, smart_contracts, "Executa transações", "Ethers.js")
Rel(smart_contracts, ethereum_net, "Deploy/Interação", "Web3/RPC")

Rel(event_module, file_module, "Processa uploads", "NestJS/HTTP")
Rel(file_module, storage_ext, "Armazena arquivos", "REST API")
Rel(user_module, email_ext, "Envia emails", "SMTP/API")

SHOW_LEGEND()
@enduml

@startuml c4_level3
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

title AutoLogger - Componentes do Event Module

LAYOUT_TOP_DOWN()

Person(user, "Usuário", "Proprietário de veículo ou comprador interessado")
Container(frontend, "Frontend Web", "React + TypeScript", "Interface do usuário")
Container(blockchain_module, "Blockchain Module", "NestJS + Ethers.js", "Interação com blockchain")
Container(file_module, "File Module", "NestJS", "Gestão de arquivos")
ContainerDb(database, "PostgreSQL", "Database", "Armazenamento principal")

Container_Boundary(event_module, "Event Module") {
    Component(event_controller, "Event Controller", "NestJS Controller", "Endpoints REST para eventos veiculares. Implementa validação de entrada e autenticação JWT.")
    
    Component(event_manager, "Event Manager", "Service Class", "Lógica de negócio principal. Orquestra criação, edição e listagem de eventos.")
    
    Component(hash_generator, "Hash Generator", "Utility Service", "Gera hash SHA-256 único para cada evento.")
    
    Component(validation_service, "Validation Service", "Service Class", "Validações de regras de negócio e integridade dos dados de eventos.")
    
    Component(confirmation_service, "Confirmation Service", "Service Class", "Implementa dupla confirmação antes do registro na blockchain.")
    
    Component(event_repository, "Event Repository", "Repository Pattern", "Camada de acesso a dados. Operações CRUD com controle transacional.")
    
    Component(event_dto, "Event DTOs", "Data Transfer Objects", "Objetos para transferência de dados entre camadas.")
    
    Component(event_entity, "Event Entity", "TypeORM Entity", "Mapeamento objeto-relacional da tabela de eventos.")
}

Rel(user, frontend, "Interage com", "HTTPS")
Rel(frontend, event_controller, "Faz chamadas para", "REST/JSON")

Rel(event_controller, event_manager, "Delegação lógica", "Method calls")
Rel(event_manager, validation_service, "Valida dados", "Method calls")
Rel(event_manager, hash_generator, "Gera hash SHA-256", "Method calls")
Rel(event_manager, confirmation_service, "Confirma evento", "Method calls")
Rel(event_manager, event_repository, "Persistência de dados", "Method calls")

Rel(event_repository, event_entity, "Mapeamento ORM", "TypeORM")
Rel(event_repository, database, "Operações SQL", "TypeORM/SQL")

Rel(event_controller, event_dto, "Serialização", "JSON")
Rel(event_manager, event_dto, "Transferência de dados", "Objects")

Rel(confirmation_service, blockchain_module, "Registra hash confirmado", "HTTP/JSON")
Rel(event_manager, file_module, "Anexa arquivos", "HTTP/JSON")

SHOW_LEGEND()
@enduml

@startuml c4_level4
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4.puml
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

title AutoLogger - Código do Event Manager (Nível 4)

Container_Boundary(event_manager_code, "Event Manager - Estrutura de Código") {
    Component(ievent_manager, "IEventManager", "Interface", "Contrato do serviço")
    Component(event_manager_impl, "EventManagerImpl", "Component", "Lógica principal")
    
    Container_Boundary(event_models, "Event Models") {
        Component(event_data, "Event Data", "Component", "DTOs e Entidade")
        Component(event_types, "Event Types", "Component", "Enums e Status")
    }
    
    Component(business_rules, "Business Rules", "Component", "Validações e regras")
    Component(event_factory, "Event Factory", "Component", "Criação de eventos")
}

Rel(event_manager_impl, ievent_manager, "implementa")
Rel(event_manager_impl, event_data, "manipula")
Rel(event_manager_impl, business_rules, "usa")
Rel(event_manager_impl, event_factory, "usa")
Rel(event_factory, event_data, "transforma")
Rel(business_rules, event_data, "valida")

System_Boundary(external, "Dependências Externas") {
    Component(repository, "Repository", "Interface", "Persistência de dados")
    Component(validation, "ValidationService", "Interface", "Validações externas")
}

Rel(event_manager_impl, repository, "depende de")
Rel(event_manager_impl, validation, "depende de")

SHOW_LEGEND()
@enduml