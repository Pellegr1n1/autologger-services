import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { ethers } from 'ethers';
import { BesuService } from './besu/besu.service';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, Not, IsNull } from 'typeorm';
import { VehicleService, ServiceStatus } from '../modules/vehicle/entities/vehicle-service.entity';

export interface BlockchainTransaction {
  hash: string;
  status: 'PENDING' | 'CONFIRMED' | 'FAILED';
  blockNumber?: number;
  gasUsed?: string;
  timestamp?: number;
}

export interface ServiceSubmissionResult {
  success: boolean;
  transactionHash?: string;
  error?: string;
  status: 'PENDING' | 'SUBMITTED' | 'CONFIRMED' | 'FAILED';
  serviceId?: string;
  message?: string;
  blockchainServiceId?: number;
}

@Injectable()
export class BlockchainService {
  private readonly logger = new Logger(BlockchainService.name);
  private provider: ethers.JsonRpcProvider;
  private wallet: ethers.Wallet;
  private contract: ethers.Contract;

  constructor(
    private configService: ConfigService,
    private besuService: BesuService,
    @InjectRepository(VehicleService)
    private vehicleServiceRepository: Repository<VehicleService>,
  ) {
    this.initializeBlockchain();
  }

  private async initializeBlockchain() {
    try {
      try {
        const isConnected = await this.besuService.isConnected();
        if (isConnected) {
          this.logger.log('‚úÖ Rede Besu privada conectada com sucesso');
          return;
        } else {
          this.logger.warn('‚ö†Ô∏è Rede Besu n√£o est√° conectada');
        }
      } catch (besuError) {
        this.logger.warn('‚ö†Ô∏è Erro ao conectar com rede Besu:', besuError.message);
      }

      // Se Besu n√£o estiver dispon√≠vel, n√£o configurar fallback
      this.logger.warn('üö´ Rede blockchain n√£o dispon√≠vel - servi√ßos n√£o ser√£o registrados na blockchain');
    } catch (error) {
      this.logger.error('‚ùå Erro ao inicializar servi√ßo blockchain:', error);
    }
  }

  async submitServiceToBlockchain(serviceData: {
    serviceId: string;
    vehicleId: string;
    mileage: number;
    cost: number;
    description: string;
    location?: string;
    type?: string;
  }): Promise<ServiceSubmissionResult> {
    try {
      if (await this.besuService.isConnected()) {
        try {
          // Registrar o servi√ßo diretamente na blockchain
          const result = await this.besuService.registerService({
            vehicleId: serviceData.vehicleId,
            mileage: serviceData.mileage,
            cost: serviceData.cost,
            description: serviceData.description,
            serviceType: serviceData.type || 'MANUTENCAO'
          });

          if (result.success) {
            this.logger.log('‚úÖ Servi√ßo registrado na rede Besu com sucesso');
            return {
              success: true,
              transactionHash: result.transactionHash,
              status: 'SUBMITTED' as const,
              serviceId: serviceData.serviceId,
              message: 'Servi√ßo registrado na blockchain Besu',
              blockchainServiceId: result.serviceId
            };
          } else {
            throw new Error(result.error || 'Erro desconhecido');
          }
        } catch (besuError) {
          this.logger.error('‚ùå Erro ao registrar na rede Besu:', besuError.message);
          return {
            success: false,
            error: `Falha na rede Besu: ${besuError.message}`,
            status: 'FAILED'
          };
        }
      }

      // Se Besu n√£o estiver dispon√≠vel, retornar falha
      this.logger.warn('üö´ Rede Besu n√£o dispon√≠vel - servi√ßo n√£o registrado na blockchain');
      return {
        success: false,
        error: 'Rede blockchain n√£o dispon√≠vel',
        status: 'FAILED',
        message: 'Servi√ßo salvo localmente, mas n√£o registrado na blockchain'
      };
    } catch (error) {
      this.logger.error('‚ùå Erro ao submeter servi√ßo para blockchain:', error);
      return {
        success: false,
        error: error.message,
        status: 'FAILED'
      };
    }
  }

  async confirmService(serviceId: string): Promise<ServiceSubmissionResult> {
    try {
      if (await this.besuService.isConnected()) {
        this.logger.log('‚úÖ Transa√ß√£o Besu automaticamente confirmada');
        return {
          success: true,
          status: 'CONFIRMED',
          message: 'Transa√ß√µes Besu s√£o automaticamente confirmadas'
        };
      }

      // Se Besu n√£o estiver dispon√≠vel
      this.logger.warn('üö´ Rede blockchain n√£o dispon√≠vel para confirma√ß√£o');
      return {
        success: false,
        error: 'Rede blockchain n√£o dispon√≠vel',
        status: 'FAILED'
      };
    } catch (error) {
      this.logger.error('‚ùå Erro ao confirmar servi√ßo na blockchain:', error);
      return {
        success: false,
        error: error.message,
        status: 'FAILED'
      };
    }
  }

  async getServiceStatus(serviceId: string): Promise<BlockchainTransaction> {
    try {
      if (await this.besuService.isConnected()) {
        try {
          return {
            hash: serviceId,
            status: 'CONFIRMED',
            timestamp: Date.now()
          };
        } catch (besuError) {
          this.logger.warn('‚ö†Ô∏è Erro ao verificar status na rede Besu:', besuError.message);
        }
      }

      this.logger.warn('üö´ Rede blockchain n√£o dispon√≠vel para verificar status');
      return {
        hash: serviceId,
        status: 'FAILED'
      };
    } catch (error) {
      this.logger.error('‚ùå Erro ao obter status do servi√ßo na blockchain:', error);
      return {
        hash: serviceId,
        status: 'FAILED'
      };
    }
  }

  /**
   * Verifica servi√ßos na blockchain para validar status real
   * @param services Lista de servi√ßos do banco de dados
   * @returns Servi√ßos com status verificado na blockchain
   */
  private async verifyServicesInBlockchain(services: any[]): Promise<any[]> {
    try {
      const verifiedServices = await Promise.all(
        services.map(async (service) => {
          let blockchainVerified = false;
          
          if (service.blockchainHash) {
            try {
              // Verificar se o hash existe no contrato
              const hashExists = await this.besuService.verifyHashInContract(service.blockchainHash);
              blockchainVerified = hashExists;
              
              if (hashExists) {
                // Hash existe na blockchain - garantir que est√° marcado como confirmado
                if (!service.blockchainConfirmedAt || service.status !== ServiceStatus.CONFIRMED) {
                  await this.vehicleServiceRepository.update(
                    { id: service.id },
                    { 
                      blockchainConfirmedAt: new Date(),
                      status: ServiceStatus.CONFIRMED,
                      isImmutable: true,
                      canEdit: false
                    }
                  );
                  service.blockchainConfirmedAt = new Date();
                  service.status = ServiceStatus.CONFIRMED;
                  this.logger.log(`‚úÖ Servi√ßo ${service.id} atualizado como CONFIRMED (verificado na blockchain)`);
                }
              } else if (!hashExists && service.status === ServiceStatus.CONFIRMED) {
                // Hash N√ÉO existe na blockchain, mas banco diz que est√° confirmado
                // Marcar como rejeitado para permitir reenvio
                this.logger.warn(`‚ùå Hash ${service.blockchainHash} N√ÉO encontrado na blockchain - marcando como REJECTED para reenvio`);
                await this.vehicleServiceRepository.update(
                  { id: service.id },
                  { 
                    status: ServiceStatus.REJECTED,
                    isImmutable: false,
                    canEdit: true
                  }
                );
                service.status = ServiceStatus.REJECTED;
              }
            } catch (error) {
              this.logger.warn(`‚ö†Ô∏è Erro ao verificar hash ${service.blockchainHash}: ${error.message}`);
              blockchainVerified = false;
            }
          }
          
          return {
            ...service,
            blockchainVerified
          };
        })
      );
      
      return verifiedServices;
    } catch (error) {
      this.logger.error('‚ùå Erro ao verificar servi√ßos na blockchain:', error.message);
      return services.map(service => ({ ...service, blockchainVerified: false }));
    }
  }

  /**
   * For√ßa a verifica√ß√£o de todos os servi√ßos na blockchain
   * @returns Lista de servi√ßos com status atualizado
   */
  async forceVerifyAllServices() {
    try {
      this.logger.log('üîÑ For√ßando verifica√ß√£o de todos os servi√ßos na blockchain...');
      
      // Buscar todos os servi√ßos com hash blockchain
      const services = await this.vehicleServiceRepository.find({
        where: [
          { blockchainHash: Not(IsNull()) }
        ],
        relations: ['vehicle'],
        order: { createdAt: 'DESC' }
      });

      // Verificar cada servi√ßo na blockchain
      const verifiedServices = await this.verifyServicesInBlockchain(services);
      
      this.logger.log(`‚úÖ Verifica√ß√£o conclu√≠da: ${verifiedServices.length} servi√ßos processados`);
      return verifiedServices;
    } catch (error) {
      this.logger.error('‚ùå Erro ao for√ßar verifica√ß√£o de servi√ßos:', error.message);
      throw error;
    }
  }

  /**
   * Corrige hashes inv√°lidos (pending-hash) e gera hashes reais
   * @returns Resultado da opera√ß√£o
   */
  async fixInvalidHashes() {
    try {
      this.logger.log('üîß Corrigindo hashes inv√°lidos...');
      
      // Buscar servi√ßos com hash "pending-hash"
      const services = await this.vehicleServiceRepository.find({
        where: [
          { blockchainHash: 'pending-hash' }
        ],
        relations: ['vehicle'],
        order: { createdAt: 'DESC' }
      });

      let successCount = 0;
      let errorCount = 0;

      for (const service of services) {
        try {
          // Gerar hash real baseado nos dados do servi√ßo
          const eventData = {
            serviceId: service.id,
            vehicleId: service.vehicleId,
            type: service.type,
            description: service.description,
            serviceDate: service.serviceDate,
            timestamp: new Date().toISOString()
          };
          
          const realHash = ethers.keccak256(ethers.toUtf8Bytes(JSON.stringify(eventData)));
          
          // Atualizar o hash no banco
          await this.vehicleServiceRepository.update(
            { id: service.id },
            { blockchainHash: realHash }
          );
          
          // Registrar o hash no contrato
          const result = await this.besuService.registerHash(
            realHash,
            service.vehicleId,
            service.type || 'MANUTENCAO'
          );
          
          if (result.success) {
            successCount++;
            this.logger.log(`‚úÖ Hash corrigido e registrado: ${realHash}`);
          } else {
            errorCount++;
            this.logger.warn(`‚ö†Ô∏è Falha ao registrar hash corrigido: ${realHash}`);
          }
        } catch (error) {
          errorCount++;
          this.logger.error(`‚ùå Erro ao corrigir hash do servi√ßo ${service.id}:`, error.message);
        }
      }

      this.logger.log(`üìä Corre√ß√£o conclu√≠da: ${successCount} sucessos, ${errorCount} erros`);
      
      return {
        success: true,
        totalProcessed: services.length,
        successCount,
        errorCount,
        message: `Corrigidos ${successCount} de ${services.length} hashes inv√°lidos`
      };
    } catch (error) {
      this.logger.error('‚ùå Erro ao corrigir hashes inv√°lidos:', error.message);
      throw error;
    }
  }

  /**
   * Limpa hashes √≥rf√£os do contrato (hashes que n√£o existem no banco local)
   * @returns Resultado da opera√ß√£o
   */
  async cleanOrphanHashes() {
    try {
      this.logger.log('üßπ Iniciando limpeza de hashes √≥rf√£os...');
      
      // Buscar todos os servi√ßos com hash blockchain
      const services = await this.vehicleServiceRepository.find({
        where: [
          { blockchainHash: Not(IsNull()) }
        ],
        relations: ['vehicle'],
        order: { createdAt: 'DESC' }
      });

      this.logger.log(`üìä Servi√ßos encontrados no banco: ${services.length}`);

      // Obter todos os hashes v√°lidos do banco local
      const validHashes = new Set(services.map(s => s.blockchainHash));
      
      this.logger.log(`üìä Hashes √∫nicos no banco local: ${validHashes.size}`);
      
      // Obter estat√≠sticas do contrato
      const contractStats = await this.besuService.getContractStats();
      const totalHashesInContract = contractStats.totalHashes;
      
      this.logger.log(`üìä Total de hashes no contrato: ${totalHashesInContract}`);
      
      if (totalHashesInContract > validHashes.size) {
        const orphanCount = totalHashesInContract - validHashes.size;
        this.logger.warn(`‚ö†Ô∏è Detectados ${orphanCount} hashes √≥rf√£os no contrato`);
        
        // Listar os hashes do banco para debug
        this.logger.log(`üìã Hashes do banco local: ${Array.from(validHashes).join(', ')}`);
        
        return {
          success: true,
          message: `Detectados ${orphanCount} hashes √≥rf√£os no contrato`,
          orphanCount: orphanCount
        };
      }
      
      this.logger.log('‚úÖ Nenhum hash √≥rf√£o detectado');
      return {
        success: true,
        message: 'Nenhum hash √≥rf√£o detectado',
        orphanCount: 0
      };
    } catch (error) {
      this.logger.error('‚ùå Erro ao limpar hashes √≥rf√£os:', error.message);
      throw error;
    }
  }

  /**
   * Registra todos os hashes existentes no contrato blockchain
   * @returns Resultado da opera√ß√£o
   */
  async registerAllExistingHashes() {
    try {
      this.logger.log('üîÑ Registrando todos os hashes existentes no contrato...');
      
      // Buscar todos os servi√ßos com hash blockchain
      const services = await this.vehicleServiceRepository.find({
        where: [
          { blockchainHash: Not(IsNull()) }
        ],
        relations: ['vehicle'],
        order: { createdAt: 'DESC' }
      });

      let successCount = 0;
      let errorCount = 0;

      for (const service of services) {
        try {
          // Verificar se o hash j√° existe no contrato
          const exists = await this.besuService.verifyHashInContract(service.blockchainHash);
          
          if (!exists) {
            // Registrar o hash no contrato
            const result = await this.besuService.registerHash(
              service.blockchainHash,
              service.vehicleId,
              service.type || 'MANUTENCAO'
            );
            
            if (result.success) {
              successCount++;
              this.logger.log(`‚úÖ Hash registrado: ${service.blockchainHash}`);
            } else {
              errorCount++;
              this.logger.warn(`‚ö†Ô∏è Falha ao registrar hash: ${service.blockchainHash}`);
            }
          } else {
            this.logger.log(`‚ÑπÔ∏è Hash j√° existe no contrato: ${service.blockchainHash}`);
          }
        } catch (error) {
          errorCount++;
          this.logger.error(`‚ùå Erro ao processar hash ${service.blockchainHash}:`, error.message);
        }
      }

      this.logger.log(`üìä Registro conclu√≠do: ${successCount} sucessos, ${errorCount} erros`);
      
      return {
        success: true,
        totalProcessed: services.length,
        successCount,
        errorCount,
        message: `Registrados ${successCount} de ${services.length} hashes`
      };
    } catch (error) {
      this.logger.error('‚ùå Erro ao registrar hashes existentes:', error.message);
      throw error;
    }
  }

  /**
   * Corrige hashes que est√£o falhando na verifica√ß√£o
   * @returns Resultado da opera√ß√£o
   */
  async fixFailingHashes() {
    try {
      this.logger.log('üîß Corrigindo hashes que est√£o falhando na verifica√ß√£o...');
      
      // Buscar todos os servi√ßos com hash blockchain
      const services = await this.vehicleServiceRepository.find({
        where: [
          { blockchainHash: Not(IsNull()) }
        ],
        relations: ['vehicle'],
        order: { createdAt: 'DESC' }
      });

      let successCount = 0;
      let errorCount = 0;
      let fixedCount = 0;

      for (const service of services) {
        try {
          // Verificar se o hash existe no contrato
          const exists = await this.besuService.verifyHashInContract(service.blockchainHash);
          
          if (!exists) {
            this.logger.log(`üîß Hash n√£o encontrado no contrato, registrando: ${service.blockchainHash}`);
            
            // Registrar o hash no contrato
            const result = await this.besuService.registerHash(
              service.blockchainHash,
              service.vehicleId,
              service.type || 'MANUTENCAO'
            );
            
            if (result.success) {
              // Atualizar status de confirma√ß√£o no banco
              await this.vehicleServiceRepository.update(
                { id: service.id },
                { 
                  blockchainConfirmedAt: new Date(),
                  status: ServiceStatus.CONFIRMED,
                  isImmutable: true,
                  canEdit: false,
                  confirmedBy: 'blockchain-fix'
                }
              );
              
              fixedCount++;
              successCount++;
              this.logger.log(`‚úÖ Hash corrigido e registrado: ${service.blockchainHash}`);
            } else {
              errorCount++;
              this.logger.warn(`‚ö†Ô∏è Falha ao registrar hash: ${service.blockchainHash}`);
            }
          } else {
            this.logger.log(`‚ÑπÔ∏è Hash j√° existe no contrato: ${service.blockchainHash}`);
            successCount++;
          }
        } catch (error) {
          errorCount++;
          this.logger.error(`‚ùå Erro ao processar hash ${service.blockchainHash}:`, error.message);
        }
      }

      this.logger.log(`üìä Corre√ß√£o conclu√≠da: ${fixedCount} hashes corrigidos, ${successCount} sucessos, ${errorCount} erros`);
      
      return {
        success: true,
        totalProcessed: services.length,
        fixedCount,
        successCount,
        errorCount,
        message: `Corrigidos ${fixedCount} de ${services.length} hashes falhando`
      };
    } catch (error) {
      this.logger.error('‚ùå Erro ao corrigir hashes falhando:', error.message);
      throw error;
    }
  }

  /**
   * Verifica e corrige datas incorretas nos servi√ßos
   * @returns Resultado da opera√ß√£o
   */
  async fixIncorrectDates() {
    try {
      this.logger.log('üîß Verificando e corrigindo datas incorretas...');
      
      // Buscar todos os servi√ßos
      const services = await this.vehicleServiceRepository.find({
        relations: ['vehicle'],
        order: { createdAt: 'DESC' }
      });

      let correctedCount = 0;
      const currentDate = new Date();
      const oneYearAgo = new Date(currentDate.getFullYear() - 1, currentDate.getMonth(), currentDate.getDate());
      const oneYearFromNow = new Date(currentDate.getFullYear() + 1, currentDate.getMonth(), currentDate.getDate());

      for (const service of services) {
        let needsUpdate = false;
        const updates: any = {};

        // Verificar serviceDate
        if (service.serviceDate) {
          const serviceDate = new Date(service.serviceDate);
          // Se a data est√° muito no futuro (mais de 1 ano) ou muito no passado (mais de 1 ano)
          if (serviceDate > oneYearFromNow || serviceDate < oneYearAgo) {
            this.logger.warn(`‚ö†Ô∏è Data de servi√ßo suspeita: ${serviceDate} para servi√ßo ${service.id}`);
            // Usar a data de cria√ß√£o como refer√™ncia
            updates.serviceDate = service.createdAt;
            needsUpdate = true;
          }
        }

        // Verificar se createdAt est√° no futuro
        if (service.createdAt) {
          const createdAt = new Date(service.createdAt);
          if (createdAt > currentDate) {
            this.logger.warn(`‚ö†Ô∏è Data de cria√ß√£o no futuro: ${createdAt} para servi√ßo ${service.id}`);
            updates.createdAt = currentDate;
            needsUpdate = true;
          }
        }

        if (needsUpdate) {
          await this.vehicleServiceRepository.update(
            { id: service.id },
            updates
          );
          correctedCount++;
          this.logger.log(`‚úÖ Datas corrigidas para servi√ßo ${service.id}`);
        }
      }

      this.logger.log(`üìä Corre√ß√£o conclu√≠da: ${correctedCount} servi√ßos corrigidos`);
      
      return {
        success: true,
        totalProcessed: services.length,
        correctedCount,
        message: `Corrigidas ${correctedCount} datas incorretas de ${services.length} servi√ßos`
      };
    } catch (error) {
      this.logger.error('‚ùå Erro ao corrigir datas:', error.message);
      throw error;
    }
  }

  async getAllServices(userId?: string) {
    try {
      if (await this.besuService.isConnected()) {
        this.logger.log('üìã Servi√ßos gerenciados pela rede Besu');

        // Buscar servi√ßos do banco de dados que t√™m hash blockchain
        const queryBuilder = this.vehicleServiceRepository
          .createQueryBuilder('vehicleService')
          .leftJoinAndSelect('vehicleService.vehicle', 'vehicle')
          .where('vehicleService.blockchainHash IS NOT NULL')
          .orderBy('vehicleService.createdAt', 'DESC');

        if (userId) {
          queryBuilder.andWhere('vehicle.userId = :userId', { userId });
        }

        const services = await queryBuilder.getMany();

        this.logger.log(`üìä Encontrados ${services.length} servi√ßos com hash blockchain`);
        this.logger.log(`üìä Servi√ßos confirmados: ${services.filter(s => s.blockchainConfirmedAt).length}`);

        // Obter estat√≠sticas do contrato para valida√ß√£o
        const contractStats = await this.besuService.getContractStats();
        this.logger.log(`üìä Total de hashes no contrato: ${contractStats.totalHashes}`);

        // Verificar status real das transa√ß√µes na blockchain
        const verifiedServices = await this.verifyServicesInBlockchain(services);

        // Converter para formato esperado pelo frontend
        const mappedServices = verifiedServices.map((service) => {
          // PRIORIDADE: Blockchain √© a fonte da verdade!
          // Se n√£o est√° verificado na blockchain, √© FAILED (precisa reenviar)
          let mappedStatus = 'PENDING';
          let isValidHash = false;
          
          if (service.blockchainHash) {
            isValidHash = true;
            
            if (service.blockchainVerified) {
              // ‚úÖ √öNICO CASO DE SUCESSO: Verificado na blockchain
              mappedStatus = 'CONFIRMED';
              this.logger.log(`‚úÖ Servi√ßo ${service.id} CONFIRMADO na blockchain`);
            } else {
              // ‚ùå Tem hash mas N√ÉO est√° na blockchain ‚Üí FAILED (precisa reenviar)
              if (service.blockchainHash === 'pending-hash') {
                mappedStatus = 'PENDING';
                this.logger.log(`‚è≥ Servi√ßo ${service.id} com hash tempor√°rio - aguardando registro`);
              } else {
                mappedStatus = 'FAILED';
                this.logger.log(`‚ùå Servi√ßo ${service.id} N√ÉO verificado na blockchain - Status: FAILED (reenvio necess√°rio)`);
              }
            }
          } else if (service.status === 'rejected' || service.status === 'expired') {
            // Servi√ßo rejeitado ou expirado no banco
            mappedStatus = 'FAILED';
            this.logger.log(`‚ùå Servi√ßo ${service.id} rejeitado/expirado no banco - Status: FAILED`);
          } else {
            // Sem hash blockchain ainda (registro em andamento)
            mappedStatus = 'PENDING';
            this.logger.log(`‚è≥ Servi√ßo ${service.id} sem hash - Status: PENDING`);
          }

          this.logger.log(`üîç Servi√ßo ${service.id}: hash=${service.blockchainHash?.substring(0, 10)}..., verified=${service.blockchainVerified}, dbStatus=${service.status}, finalStatus=${mappedStatus}`);
          this.logger.log(`üìÖ Datas do servi√ßo ${service.id}: serviceDate=${service.serviceDate}, createdAt=${service.createdAt}`);

          return {
            id: service.id,
            serviceId: service.id,
            vehicleId: service.vehicleId,
            type: service.type,
            category: service.category,
            description: service.description,
            serviceDate: service.serviceDate,
            createdAt: service.createdAt,
            mileage: service.mileage,
            cost: service.cost,
            location: service.location,
            status: mappedStatus,
            blockchainHash: service.blockchainHash,
            transactionHash: service.blockchainHash,
            blockNumber: service.blockchainConfirmedAt ? 1 : undefined, // Placeholder
            gasPrice: '-',
            technician: service.technician,
            warranty: service.warranty,
            notes: service.notes,
            isValidHash: isValidHash
          };
        });

        const confirmedCount = mappedServices.filter(s => s.status === 'CONFIRMED').length;
        const submittedCount = mappedServices.filter(s => s.status === 'SUBMITTED').length;
        const pendingCount = mappedServices.filter(s => s.status === 'PENDING').length;
        const failedCount = mappedServices.filter(s => s.status === 'FAILED').length;
        
        this.logger.log(`üìä Status final: CONFIRMED=${confirmedCount}, SUBMITTED=${submittedCount}, PENDING=${pendingCount}, FAILED=${failedCount}`);

        return mappedServices;
      }

      this.logger.warn('üö´ Rede blockchain n√£o dispon√≠vel para listar servi√ßos');
      return [];
    } catch (error) {
      this.logger.error('‚ùå Erro ao obter todos os servi√ßos:', error);
      return [];
    }
  }

  /**
   * Reenvia um servi√ßo falhado para a blockchain
   * @param serviceId ID do servi√ßo a ser reenviado
   * @returns Resultado do reenvio
   */
  async resendFailedService(serviceId: string): Promise<ServiceSubmissionResult> {
    try {
      this.logger.log(`üîÑ Reenviando servi√ßo falhado: ${serviceId}`);

      // Buscar o servi√ßo no banco de dados
      const service = await this.vehicleServiceRepository.findOne({
        where: { id: serviceId },
        relations: ['vehicle']
      });

      this.logger.log(`üîç Servi√ßo encontrado:`, {
        id: service?.id,
        status: service?.status,
        blockchainHash: service?.blockchainHash,
        isImmutable: service?.isImmutable,
        vehicleId: service?.vehicleId,
        description: service?.description
      });

      if (!service) {
        this.logger.warn(`‚ùå Servi√ßo n√£o encontrado: ${serviceId}`);
        return {
          success: false,
          error: 'Servi√ßo n√£o encontrado',
          status: 'FAILED'
        };
      }

      // OTIMIZA√á√ÉO: Se o servi√ßo j√° est√° marcado como REJECTED/EXPIRED, pode reenviar diretamente
      // (n√£o precisa verificar na blockchain, pois j√° sabemos que falhou)
      const canResendDirectly = 
        service.status === ServiceStatus.REJECTED || 
        service.status === ServiceStatus.EXPIRED ||
        !service.blockchainHash ||
        service.blockchainHash === 'pending-hash';

      if (canResendDirectly) {
        this.logger.log(`‚úÖ Servi√ßo ${service.id} pode ser reenviado diretamente (status: ${service.status})`);
      } else {
        // Apenas verifica na blockchain se o servi√ßo parece estar confirmado
        // Usa timeout curto (5 segundos) para n√£o travar
        this.logger.log(`üîç Verificando se hash est√° na blockchain (com timeout de 5s)...`);
        
        try {
          const verificationPromise = this.besuService.verifyHashInContract(service.blockchainHash);
          const timeoutPromise = new Promise<boolean>((_, reject) => 
            setTimeout(() => reject(new Error('Timeout na verifica√ß√£o')), 5000)
          );
          
          const isInBlockchain = await Promise.race([verificationPromise, timeoutPromise]);
          
          if (isInBlockchain) {
            this.logger.warn(`‚ö†Ô∏è Servi√ßo ${service.id} J√Å EST√Å na blockchain - Reenvio bloqueado`);
            return {
              success: false,
              error: 'Servi√ßo j√° est√° registrado e verificado na blockchain',
              status: 'FAILED'
            };
          }
          
          this.logger.log(`‚úÖ Hash n√£o encontrado na blockchain - pode reenviar`);
        } catch (error) {
          // Se a verifica√ß√£o falhar ou der timeout, PERMITE reenvio
          // (melhor tentar reenviar do que bloquear por erro de verifica√ß√£o)
          this.logger.warn(`‚ö†Ô∏è Erro/timeout na verifica√ß√£o (${error.message}) - permitindo reenvio por seguran√ßa`);
        }
      }

      // Log de tentativas (sem limite - permite reenvios ilimitados)
      const retryCount = await this.getRetryCount(serviceId);
      this.logger.log(`üîÑ Tentativa de reenvio n√∫mero ${retryCount + 1}`);

      // Gerar o hash do servi√ßo
      const eventData = {
        serviceId: service.id,
        vehicleId: service.vehicleId,
        type: service.type,
        description: service.description,
        serviceDate: service.serviceDate,
        timestamp: new Date().toISOString()
      };
      
      const serviceHash = ethers.keccak256(ethers.toUtf8Bytes(JSON.stringify(eventData)));
      this.logger.log(`üîë Hash gerado para reenvio do servi√ßo ${service.id}: ${serviceHash}`);
      
      // Registrar o hash no contrato blockchain
      this.logger.log(`üìù Tentando registrar hash no contrato blockchain...`);
      const hashResult = await this.registerHashInContract(
        serviceHash,
        service.vehicleId,
        service.type || 'MANUTENCAO'
      );

      this.logger.log(`üìä Resultado do registro:`, hashResult);

      if (hashResult.success) {
        // Atualizar o servi√ßo com informa√ß√µes da blockchain
        service.blockchainHash = serviceHash;
        service.status = ServiceStatus.CONFIRMED;
        service.isImmutable = true;
        service.canEdit = false;
        service.blockchainConfirmedAt = new Date();
        service.confirmedBy = 'blockchain-resend';
        
        await this.vehicleServiceRepository.save(service);
        
        // Incrementar contador de tentativas
        await this.incrementRetryCount(serviceId);
        
        this.logger.log(`‚úÖ Servi√ßo ${service.id} reenviado e registrado na blockchain com sucesso - Hash: ${serviceHash}`);
        
        return {
          success: true,
          transactionHash: serviceHash,
          status: 'CONFIRMED',
          message: 'Servi√ßo reenviado e registrado na blockchain com sucesso'
        };
      } else {
        // Incrementar contador de tentativas mesmo em caso de falha
        await this.incrementRetryCount(serviceId);
        
        // Manter ou atualizar status como rejeitado
        if (service.status !== ServiceStatus.REJECTED) {
          service.status = ServiceStatus.REJECTED;
          await this.vehicleServiceRepository.save(service);
        }
        
        this.logger.warn(`‚ö†Ô∏è Falha ao reenviar servi√ßo ${service.id}: ${hashResult.error}`);
        
        return {
          success: false,
          error: hashResult.error || 'Erro ao registrar na blockchain',
          status: 'FAILED'
        };
      }
    } catch (error) {
      this.logger.error('‚ùå Erro ao reenviar servi√ßo:', error);
      return {
        success: false,
        error: error.message,
        status: 'FAILED'
      };
    }
  }

  /**
   * Obt√©m o n√∫mero de tentativas de reenvio de um servi√ßo
   * @param serviceId ID do servi√ßo
   * @returns N√∫mero de tentativas
   */
  private async getRetryCount(serviceId: string): Promise<number> {
    // Por simplicidade, vamos usar um campo no banco ou cache
    // Em uma implementa√ß√£o real, voc√™ poderia ter uma tabela separada para tracking
    const service = await this.vehicleServiceRepository.findOne({
      where: { id: serviceId },
      select: ['id', 'notes'] // Usar notes para armazenar retry count temporariamente
    });

    if (!service || !service.notes) return 0;

    const retryMatch = service.notes.match(/retry_count:(\d+)/);
    return retryMatch ? parseInt(retryMatch[1]) : 0;
  }

  /**
   * Incrementa o contador de tentativas de reenvio
   * @param serviceId ID do servi√ßo
   */
  private async incrementRetryCount(serviceId: string): Promise<void> {
    const currentCount = await this.getRetryCount(serviceId);
    const newCount = currentCount + 1;
    
    await this.vehicleServiceRepository.update(
      { id: serviceId },
      { 
        notes: `retry_count:${newCount}`,
        updatedAt: new Date()
      }
    );
  }

  /**
   * Reseta o contador de tentativas de reenvio de um servi√ßo
   * @param serviceId ID do servi√ßo
   */
  async resetRetryCount(serviceId: string): Promise<{ success: boolean; message: string }> {
    try {
      this.logger.log(`üîÑ Resetando contador de tentativas do servi√ßo: ${serviceId}`);
      
      await this.vehicleServiceRepository.update(
        { id: serviceId },
        { 
          notes: 'retry_count:0',
          updatedAt: new Date()
        }
      );
      
      return {
        success: true,
        message: 'Contador de tentativas resetado com sucesso'
      };
    } catch (error) {
      this.logger.error(`‚ùå Erro ao resetar contador: ${error.message}`);
      return {
        success: false,
        message: `Erro ao resetar contador: ${error.message}`
      };
    }
  }

  /**
   * Reseta o contador de todos os servi√ßos falhados
   */
  async resetAllFailedRetries(): Promise<{ success: boolean; count: number; message: string }> {
    try {
      this.logger.log(`üîÑ Resetando contadores de todos os servi√ßos rejeitados...`);
      
      // Buscar todos os servi√ßos rejeitados/expirados
      const failedServices = await this.vehicleServiceRepository.find({
        where: [
          { status: ServiceStatus.REJECTED },
          { status: ServiceStatus.EXPIRED }
        ]
      });
      
      // Resetar contador de cada um
      await Promise.all(
        failedServices.map(service =>
          this.vehicleServiceRepository.update(
            { id: service.id },
            { notes: 'retry_count:0', updatedAt: new Date() }
          )
        )
      );
      
      this.logger.log(`‚úÖ Resetados ${failedServices.length} servi√ßos`);
      
      return {
        success: true,
        count: failedServices.length,
        message: `${failedServices.length} servi√ßos resetados com sucesso`
      };
    } catch (error) {
      this.logger.error(`‚ùå Erro ao resetar contadores: ${error.message}`);
      return {
        success: false,
        count: 0,
        message: `Erro ao resetar contadores: ${error.message}`
      };
    }
  }


  /**
   * Registra um hash diretamente no contrato blockchain
   * @param hash Hash a ser registrado
   * @param vehicleId ID do ve√≠culo
   * @param eventType Tipo do evento
   * @returns Resultado do registro
   */
  async registerHashInContract(
    hash: string,
    vehicleId: string,
    eventType: string
  ): Promise<{ success: boolean; transactionHash?: string; error?: string }> {
    try {
      this.logger.log(`üîÑ Iniciando registro de hash no contrato: ${hash}`);
      
      const isConnected = await this.besuService.isConnected();
      this.logger.log(`üîó Status da conex√£o Besu: ${isConnected}`);
      
      if (isConnected) {
        try {
          this.logger.log(`üìù Chamando besuService.registerHash com timeout de 25s...`);
          
          // Adicionar timeout de 25 segundos para n√£o ultrapassar timeout do HTTP (30s)
          const registerPromise = this.besuService.registerHash(hash, vehicleId, eventType);
          const timeoutPromise = new Promise<any>((_, reject) => 
            setTimeout(() => reject(new Error('Timeout no registro (25s)')), 25000)
          );
          
          const result = await Promise.race([registerPromise, timeoutPromise]);
          
          this.logger.log(`üìä Resultado do besuService.registerHash:`, result);
          
          if (result.success) {
            this.logger.log(`‚úÖ Hash registrado no contrato: ${hash}`);
            return {
              success: true,
              transactionHash: result.transactionHash
            };
          } else {
            this.logger.warn(`‚ö†Ô∏è Falha ao registrar hash no contrato: ${result.error}`);
            return {
              success: false,
              error: result.error
            };
          }
        } catch (besuError) {
          this.logger.error('‚ùå Erro ao registrar hash na rede Besu:', besuError.message);
          return {
            success: false,
            error: `Falha na rede Besu: ${besuError.message}`
          };
        }
      }

      // Se Besu n√£o estiver dispon√≠vel, retornar falha
      this.logger.warn('üö´ Rede Besu n√£o dispon√≠vel - hash n√£o registrado na blockchain');
      return {
        success: false,
        error: 'Rede blockchain n√£o dispon√≠vel'
      };
    } catch (error) {
      this.logger.error('‚ùå Erro ao registrar hash no contrato:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  async getNetworkHealth(): Promise<{ status: string; blockNumber?: number; gasPrice?: string; network?: string; peers?: number }> {
    try {
      if (await this.besuService.isConnected()) {
        try {
          const networkInfo = await this.besuService.getNetworkInfo();
          return {
            status: 'HEALTHY',
            blockNumber: networkInfo.blockNumber,
            gasPrice: networkInfo.gasPrice,
            network: `Besu Chain ID ${networkInfo.chainId}`
          };
        } catch (besuError) {
          this.logger.warn('‚ö†Ô∏è Erro ao verificar sa√∫de da rede Besu:', besuError.message);
        }
      }

      return {
        status: 'UNHEALTHY',
        blockNumber: 0,
        gasPrice: '0',
        network: 'Besu n√£o dispon√≠vel'
      };
    } catch (error) {
      this.logger.error('‚ùå Erro ao verificar sa√∫de da rede:', error);
      return {
        status: 'UNHEALTHY',
        blockNumber: 0,
        gasPrice: '0',
        network: 'Erro de conex√£o'
      };
    }
  }
}
