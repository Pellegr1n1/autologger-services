import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { ethers } from 'ethers';
import { BesuService } from './besu/besu.service';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, Not, IsNull } from 'typeorm';
import { VehicleService } from '../modules/vehicle/entities/vehicle-service.entity';

export interface BlockchainTransaction {
  hash: string;
  status: 'PENDING' | 'CONFIRMED' | 'FAILED';
  blockNumber?: number;
  gasUsed?: string;
  timestamp?: number;
}

export interface ServiceSubmissionResult {
  success: boolean;
  transactionHash?: string;
  error?: string;
  status: 'PENDING' | 'SUBMITTED' | 'CONFIRMED' | 'FAILED';
  serviceId?: string;
  message?: string;
}

@Injectable()
export class BlockchainService {
  private readonly logger = new Logger(BlockchainService.name);
  private provider: ethers.JsonRpcProvider;
  private wallet: ethers.Wallet;
  private contract: ethers.Contract;

  constructor(
    private configService: ConfigService,
    private besuService: BesuService,
    @InjectRepository(VehicleService)
    private vehicleServiceRepository: Repository<VehicleService>,
  ) {
    this.initializeBlockchain();
  }

  private async initializeBlockchain() {
    try {
      try {
        const isConnected = await this.besuService.isConnected();
        if (isConnected) {
          this.logger.log('‚úÖ Rede Besu privada conectada com sucesso');
          return;
        } else {
          this.logger.warn('‚ö†Ô∏è Rede Besu n√£o est√° conectada');
        }
      } catch (besuError) {
        this.logger.warn('‚ö†Ô∏è Erro ao conectar com rede Besu:', besuError.message);
      }

      // Se Besu n√£o estiver dispon√≠vel, n√£o configurar fallback
      this.logger.warn('üö´ Rede blockchain n√£o dispon√≠vel - servi√ßos n√£o ser√£o registrados na blockchain');
    } catch (error) {
      this.logger.error('‚ùå Erro ao inicializar servi√ßo blockchain:', error);
    }
  }

  async submitServiceToBlockchain(serviceData: {
    serviceId: string;
    vehicleId: string;
    mileage: number;
    cost: number;
    description: string;
    location?: string;
    type?: string;
  }): Promise<ServiceSubmissionResult> {
    try {
      if (await this.besuService.isConnected()) {
        try {
          // Criar hash do evento para registrar na blockchain
          const eventData = {
            serviceId: serviceData.serviceId,
            vehicleId: serviceData.vehicleId,
            type: serviceData.type || 'MANUTENCAO',
            description: serviceData.description,
            cost: serviceData.cost,
            location: serviceData.location || 'Local n√£o especificado',
            mileage: serviceData.mileage,
            timestamp: new Date().toISOString()
          };

          // Criar hash √∫nico do evento
          const eventHash = ethers.keccak256(ethers.toUtf8Bytes(JSON.stringify(eventData)));

          const result = await this.besuService.registerHash(
            eventHash,
            serviceData.vehicleId,
            serviceData.type || 'MANUTENCAO'
          );

          if (result.success) {
            this.logger.log('‚úÖ Evento registrado na rede Besu com sucesso');
            return {
              success: true,
              transactionHash: result.transactionHash,
              status: 'SUBMITTED' as const,
              serviceId: serviceData.serviceId,
              message: 'Evento registrado na blockchain Besu'
            };
          } else {
            throw new Error(result.error || 'Erro desconhecido');
          }
        } catch (besuError) {
          this.logger.error('‚ùå Erro ao registrar na rede Besu:', besuError.message);
          return {
            success: false,
            error: `Falha na rede Besu: ${besuError.message}`,
            status: 'FAILED'
          };
        }
      }

      // Se Besu n√£o estiver dispon√≠vel, retornar falha
      this.logger.warn('üö´ Rede Besu n√£o dispon√≠vel - servi√ßo n√£o registrado na blockchain');
      return {
        success: false,
        error: 'Rede blockchain n√£o dispon√≠vel',
        status: 'FAILED',
        message: 'Servi√ßo salvo localmente, mas n√£o registrado na blockchain'
      };
    } catch (error) {
      this.logger.error('‚ùå Erro ao submeter servi√ßo para blockchain:', error);
      return {
        success: false,
        error: error.message,
        status: 'FAILED'
      };
    }
  }

  async confirmService(serviceId: string): Promise<ServiceSubmissionResult> {
    try {
      if (await this.besuService.isConnected()) {
        this.logger.log('‚úÖ Transa√ß√£o Besu automaticamente confirmada');
        return {
          success: true,
          status: 'CONFIRMED',
          message: 'Transa√ß√µes Besu s√£o automaticamente confirmadas'
        };
      }

      // Se Besu n√£o estiver dispon√≠vel
      this.logger.warn('üö´ Rede blockchain n√£o dispon√≠vel para confirma√ß√£o');
      return {
        success: false,
        error: 'Rede blockchain n√£o dispon√≠vel',
        status: 'FAILED'
      };
    } catch (error) {
      this.logger.error('‚ùå Erro ao confirmar servi√ßo na blockchain:', error);
      return {
        success: false,
        error: error.message,
        status: 'FAILED'
      };
    }
  }

  async getServiceStatus(serviceId: string): Promise<BlockchainTransaction> {
    try {
      if (await this.besuService.isConnected()) {
        try {
          return {
            hash: serviceId,
            status: 'CONFIRMED',
            timestamp: Date.now()
          };
        } catch (besuError) {
          this.logger.warn('‚ö†Ô∏è Erro ao verificar status na rede Besu:', besuError.message);
        }
      }

      this.logger.warn('üö´ Rede blockchain n√£o dispon√≠vel para verificar status');
      return {
        hash: serviceId,
        status: 'FAILED'
      };
    } catch (error) {
      this.logger.error('‚ùå Erro ao obter status do servi√ßo na blockchain:', error);
      return {
        hash: serviceId,
        status: 'FAILED'
      };
    }
  }

  /**
   * Verifica servi√ßos na blockchain para validar status real
   * @param services Lista de servi√ßos do banco de dados
   * @returns Servi√ßos com status verificado na blockchain
   */
  private async verifyServicesInBlockchain(services: any[]): Promise<any[]> {
    try {
      const verifiedServices = await Promise.all(
        services.map(async (service) => {
          let blockchainVerified = false;
          
          if (service.blockchainHash) {
            try {
              // Verificar se o hash existe no contrato
              const hashExists = await this.besuService.verifyHashInContract(service.blockchainHash);
              blockchainVerified = hashExists;
              
              if (hashExists && !service.blockchainConfirmedAt) {
                // Atualizar status de confirma√ß√£o no banco
                await this.vehicleServiceRepository.update(
                  { id: service.id },
                  { blockchainConfirmedAt: new Date() }
                );
                service.blockchainConfirmedAt = new Date();
              } else if (!hashExists) {
                // Hash n√£o existe no contrato - marcar como falhou
                this.logger.warn(`‚ùå Hash ${service.blockchainHash} n√£o encontrado no contrato - marcando como falhou`);
              }
            } catch (error) {
              this.logger.warn(`‚ö†Ô∏è Erro ao verificar hash ${service.blockchainHash}: ${error.message}`);
              blockchainVerified = false;
            }
          }
          
          return {
            ...service,
            blockchainVerified
          };
        })
      );
      
      return verifiedServices;
    } catch (error) {
      this.logger.error('‚ùå Erro ao verificar servi√ßos na blockchain:', error.message);
      return services.map(service => ({ ...service, blockchainVerified: false }));
    }
  }

  /**
   * For√ßa a verifica√ß√£o de todos os servi√ßos na blockchain
   * @returns Lista de servi√ßos com status atualizado
   */
  async forceVerifyAllServices() {
    try {
      this.logger.log('üîÑ For√ßando verifica√ß√£o de todos os servi√ßos na blockchain...');
      
      // Buscar todos os servi√ßos com hash blockchain
      const services = await this.vehicleServiceRepository.find({
        where: [
          { blockchainHash: Not(IsNull()) }
        ],
        relations: ['vehicle'],
        order: { createdAt: 'DESC' }
      });

      // Verificar cada servi√ßo na blockchain
      const verifiedServices = await this.verifyServicesInBlockchain(services);
      
      this.logger.log(`‚úÖ Verifica√ß√£o conclu√≠da: ${verifiedServices.length} servi√ßos processados`);
      return verifiedServices;
    } catch (error) {
      this.logger.error('‚ùå Erro ao for√ßar verifica√ß√£o de servi√ßos:', error.message);
      throw error;
    }
  }

  /**
   * Corrige hashes inv√°lidos (pending-hash) e gera hashes reais
   * @returns Resultado da opera√ß√£o
   */
  async fixInvalidHashes() {
    try {
      this.logger.log('üîß Corrigindo hashes inv√°lidos...');
      
      // Buscar servi√ßos com hash "pending-hash"
      const services = await this.vehicleServiceRepository.find({
        where: [
          { blockchainHash: 'pending-hash' }
        ],
        relations: ['vehicle'],
        order: { createdAt: 'DESC' }
      });

      let successCount = 0;
      let errorCount = 0;

      for (const service of services) {
        try {
          // Gerar hash real baseado nos dados do servi√ßo
          const eventData = {
            serviceId: service.id,
            vehicleId: service.vehicleId,
            type: service.type,
            description: service.description,
            serviceDate: service.serviceDate,
            timestamp: new Date().toISOString()
          };
          
          const realHash = ethers.keccak256(ethers.toUtf8Bytes(JSON.stringify(eventData)));
          
          // Atualizar o hash no banco
          await this.vehicleServiceRepository.update(
            { id: service.id },
            { blockchainHash: realHash }
          );
          
          // Registrar o hash no contrato
          const result = await this.besuService.registerHash(
            realHash,
            service.vehicleId,
            service.type || 'MANUTENCAO'
          );
          
          if (result.success) {
            successCount++;
            this.logger.log(`‚úÖ Hash corrigido e registrado: ${realHash}`);
          } else {
            errorCount++;
            this.logger.warn(`‚ö†Ô∏è Falha ao registrar hash corrigido: ${realHash}`);
          }
        } catch (error) {
          errorCount++;
          this.logger.error(`‚ùå Erro ao corrigir hash do servi√ßo ${service.id}:`, error.message);
        }
      }

      this.logger.log(`üìä Corre√ß√£o conclu√≠da: ${successCount} sucessos, ${errorCount} erros`);
      
      return {
        success: true,
        totalProcessed: services.length,
        successCount,
        errorCount,
        message: `Corrigidos ${successCount} de ${services.length} hashes inv√°lidos`
      };
    } catch (error) {
      this.logger.error('‚ùå Erro ao corrigir hashes inv√°lidos:', error.message);
      throw error;
    }
  }

  /**
   * Limpa hashes √≥rf√£os do contrato (hashes que n√£o existem no banco local)
   * @returns Resultado da opera√ß√£o
   */
  async cleanOrphanHashes() {
    try {
      this.logger.log('üßπ Iniciando limpeza de hashes √≥rf√£os...');
      
      // Buscar todos os servi√ßos com hash blockchain
      const services = await this.vehicleServiceRepository.find({
        where: [
          { blockchainHash: Not(IsNull()) }
        ],
        relations: ['vehicle'],
        order: { createdAt: 'DESC' }
      });

      this.logger.log(`üìä Servi√ßos encontrados no banco: ${services.length}`);

      // Obter todos os hashes v√°lidos do banco local
      const validHashes = new Set(services.map(s => s.blockchainHash));
      
      this.logger.log(`üìä Hashes √∫nicos no banco local: ${validHashes.size}`);
      
      // Obter estat√≠sticas do contrato
      const contractStats = await this.besuService.getContractStats();
      const totalHashesInContract = contractStats.totalHashes;
      
      this.logger.log(`üìä Total de hashes no contrato: ${totalHashesInContract}`);
      
      if (totalHashesInContract > validHashes.size) {
        const orphanCount = totalHashesInContract - validHashes.size;
        this.logger.warn(`‚ö†Ô∏è Detectados ${orphanCount} hashes √≥rf√£os no contrato`);
        
        // Listar os hashes do banco para debug
        this.logger.log(`üìã Hashes do banco local: ${Array.from(validHashes).join(', ')}`);
        
        return {
          success: true,
          message: `Detectados ${orphanCount} hashes √≥rf√£os no contrato`,
          orphanCount: orphanCount
        };
      }
      
      this.logger.log('‚úÖ Nenhum hash √≥rf√£o detectado');
      return {
        success: true,
        message: 'Nenhum hash √≥rf√£o detectado',
        orphanCount: 0
      };
    } catch (error) {
      this.logger.error('‚ùå Erro ao limpar hashes √≥rf√£os:', error.message);
      throw error;
    }
  }

  /**
   * Registra todos os hashes existentes no contrato blockchain
   * @returns Resultado da opera√ß√£o
   */
  async registerAllExistingHashes() {
    try {
      this.logger.log('üîÑ Registrando todos os hashes existentes no contrato...');
      
      // Buscar todos os servi√ßos com hash blockchain
      const services = await this.vehicleServiceRepository.find({
        where: [
          { blockchainHash: Not(IsNull()) }
        ],
        relations: ['vehicle'],
        order: { createdAt: 'DESC' }
      });

      let successCount = 0;
      let errorCount = 0;

      for (const service of services) {
        try {
          // Verificar se o hash j√° existe no contrato
          const exists = await this.besuService.verifyHashInContract(service.blockchainHash);
          
          if (!exists) {
            // Registrar o hash no contrato
            const result = await this.besuService.registerHash(
              service.blockchainHash,
              service.vehicleId,
              service.type || 'MANUTENCAO'
            );
            
            if (result.success) {
              successCount++;
              this.logger.log(`‚úÖ Hash registrado: ${service.blockchainHash}`);
            } else {
              errorCount++;
              this.logger.warn(`‚ö†Ô∏è Falha ao registrar hash: ${service.blockchainHash}`);
            }
          } else {
            this.logger.log(`‚ÑπÔ∏è Hash j√° existe no contrato: ${service.blockchainHash}`);
          }
        } catch (error) {
          errorCount++;
          this.logger.error(`‚ùå Erro ao processar hash ${service.blockchainHash}:`, error.message);
        }
      }

      this.logger.log(`üìä Registro conclu√≠do: ${successCount} sucessos, ${errorCount} erros`);
      
      return {
        success: true,
        totalProcessed: services.length,
        successCount,
        errorCount,
        message: `Registrados ${successCount} de ${services.length} hashes`
      };
    } catch (error) {
      this.logger.error('‚ùå Erro ao registrar hashes existentes:', error.message);
      throw error;
    }
  }

  async getAllServices() {
    try {
      if (await this.besuService.isConnected()) {
        this.logger.log('üìã Servi√ßos gerenciados pela rede Besu');

        // Buscar servi√ßos do banco de dados que t√™m hash blockchain
        const services = await this.vehicleServiceRepository.find({
          where: [
            { blockchainHash: Not(IsNull()) }
          ],
          relations: ['vehicle'],
          order: { createdAt: 'DESC' }
        });

        this.logger.log(`üìä Encontrados ${services.length} servi√ßos com hash blockchain`);
        this.logger.log(`üìä Servi√ßos confirmados: ${services.filter(s => s.blockchainConfirmedAt).length}`);

        // Obter estat√≠sticas do contrato para valida√ß√£o
        const contractStats = await this.besuService.getContractStats();
        this.logger.log(`üìä Total de hashes no contrato: ${contractStats.totalHashes}`);

        // Verificar status real das transa√ß√µes na blockchain
        const verifiedServices = await this.verifyServicesInBlockchain(services);

        // Converter para formato esperado pelo frontend
        const mappedServices = verifiedServices.map((service) => {
          // Determinar status baseado na verifica√ß√£o real da blockchain
          let mappedStatus = 'PENDING';
          let isValidHash = false;
          
          if (service.blockchainHash) {
            isValidHash = true;
            
            if (service.blockchainVerified) {
              // Servi√ßo verificado na blockchain
              mappedStatus = 'CONFIRMED';
            } else if (service.blockchainHash && !service.blockchainVerified) {
              // Servi√ßo com hash mas n√£o verificado na blockchain
              if (service.blockchainHash === 'pending-hash') {
                mappedStatus = 'PENDING'; // Hash inv√°lido, precisa ser corrigido
              } else {
                mappedStatus = 'FAILED'; // Hash v√°lido mas n√£o registrado na blockchain
              }
            } else {
              // Servi√ßo sem hash blockchain
              mappedStatus = 'PENDING';
            }
          } else if (service.status === 'rejected' || service.status === 'expired') {
            // Servi√ßo rejeitado ou expirado
            mappedStatus = 'FAILED';
          } else {
            // Servi√ßo sem hash blockchain (antigos ou pendentes)
            mappedStatus = 'PENDING';
          }

          this.logger.log(`üîç Servi√ßo ${service.id}: hash=${!!service.blockchainHash}, confirmed=${!!service.blockchainConfirmedAt}, verified=${service.blockchainVerified}, status=${mappedStatus}`);

          return {
            id: service.id,
            serviceId: service.id,
            vehicleId: service.vehicleId,
            type: service.type,
            category: service.category,
            description: service.description,
            serviceDate: service.serviceDate,
            createdAt: service.createdAt,
            mileage: service.mileage,
            cost: service.cost,
            location: service.location,
            status: mappedStatus,
            blockchainHash: service.blockchainHash,
            transactionHash: service.blockchainHash,
            blockNumber: service.blockchainConfirmedAt ? 1 : undefined, // Placeholder
            gasPrice: '-',
            technician: service.technician,
            warranty: service.warranty,
            notes: service.notes,
            isValidHash: isValidHash
          };
        });

        const confirmedCount = mappedServices.filter(s => s.status === 'CONFIRMED').length;
        const submittedCount = mappedServices.filter(s => s.status === 'SUBMITTED').length;
        const pendingCount = mappedServices.filter(s => s.status === 'PENDING').length;
        const failedCount = mappedServices.filter(s => s.status === 'FAILED').length;
        
        this.logger.log(`üìä Status final: CONFIRMED=${confirmedCount}, SUBMITTED=${submittedCount}, PENDING=${pendingCount}, FAILED=${failedCount}`);

        return mappedServices;
      }

      this.logger.warn('üö´ Rede blockchain n√£o dispon√≠vel para listar servi√ßos');
      return [];
    } catch (error) {
      this.logger.error('‚ùå Erro ao obter todos os servi√ßos:', error);
      return [];
    }
  }

  async getNetworkHealth(): Promise<{ status: string; blockNumber?: number; gasPrice?: string; network?: string; peers?: number }> {
    try {
      if (await this.besuService.isConnected()) {
        try {
          const networkInfo = await this.besuService.getNetworkInfo();
          return {
            status: 'HEALTHY',
            blockNumber: networkInfo.blockNumber,
            gasPrice: networkInfo.gasPrice,
            network: `Besu Chain ID ${networkInfo.chainId}`
          };
        } catch (besuError) {
          this.logger.warn('‚ö†Ô∏è Erro ao verificar sa√∫de da rede Besu:', besuError.message);
        }
      }

      return {
        status: 'UNHEALTHY',
        blockNumber: 0,
        gasPrice: '0',
        network: 'Besu n√£o dispon√≠vel'
      };
    } catch (error) {
      this.logger.error('‚ùå Erro ao verificar sa√∫de da rede:', error);
      return {
        status: 'UNHEALTHY',
        blockNumber: 0,
        gasPrice: '0',
        network: 'Erro de conex√£o'
      };
    }
  }
}
