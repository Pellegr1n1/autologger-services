import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { ethers } from 'ethers';

/**
 * Servi√ßo para intera√ß√£o com a rede privada Besu
 * AutoLogger - Rede Privada Besu com IBFT 2.0
 */
@Injectable()
export class BesuService {
  private readonly logger = new Logger(BesuService.name);
  private provider: ethers.JsonRpcProvider;
  private wallet: ethers.Wallet;
  private contract: ethers.Contract;

  // ABI do contrato VehicleServiceTracker
  private readonly contractABI = [
    // Fun√ß√µes principais
    'function registerService(string memory _vehicleId, uint256 _mileage, uint256 _cost, string memory _description, string memory _serviceType) external returns (uint256 serviceId)',
    'function verifyService(uint256 _serviceId) external',
    'function updateService(uint256 _serviceId, string memory _newDescription, uint256 _newCost) external',
    'function getService(uint256 _serviceId) external view returns (tuple(uint256 serviceId, string vehicleId, uint256 mileage, uint256 cost, string description, string serviceType, uint256 timestamp, address serviceProvider, bool isVerified) record)',
    'function getVehicleServices(string memory _vehicleId) external view returns (uint256[] memory serviceIds)',
    'function getProviderServices(address _provider) external view returns (uint256[] memory serviceIds)',
    'function getStats() external view returns (uint256 total, uint256 verified, uint256 balance)',
    'function registerHash(string memory _hash) external',
    'function hashExists(string memory _hash) external view returns (bool)',
    'function getRegisteredHashesCount() external view returns (uint256)',
    'function totalServices() external view returns (uint256)',
    'function nextServiceId() external view returns (uint256)',
    'function admin() external view returns (address)',
    
    // Eventos
    'event ServiceRegistered(uint256 indexed serviceId, string indexed vehicleId, address indexed serviceProvider, uint256 timestamp, uint256 cost)',
    'event ServiceVerified(uint256 indexed serviceId, address indexed verifier, uint256 timestamp)',
    'event ServiceUpdated(uint256 indexed serviceId, string description, uint256 newCost)'
  ];

  constructor(private configService: ConfigService) {
    this.initializeBesu().catch(error => {
      this.logger.error('‚ùå Erro na inicializa√ß√£o do Besu:', error);
    });
  }

  /**
   * Inicializa a conex√£o com a rede Besu
   */
  private async initializeBesu(): Promise<void> {
    try {
      const rpcUrl = this.configService.get<string>('BESU_RPC_URL', 'http://localhost:8545');
      const privateKey = this.configService.get<string>('BESU_PRIVATE_KEY');
      const contractAddress = this.configService.get<string>('BESU_CONTRACT_ADDRESS');

      this.logger.log(`üîó Conectando √† rede Besu: ${rpcUrl}`);

      // Inicializar provider
      this.provider = new ethers.JsonRpcProvider(rpcUrl);
      
      // Verificar se a rede est√° acess√≠vel
      const network = await this.provider.getNetwork();
      this.logger.log(`üì° Rede conectada: Chain ID ${network.chainId}`);

      // Inicializar wallet se chave privada for fornecida
      if (privateKey) {
        this.wallet = new ethers.Wallet(privateKey, this.provider);
        this.logger.log(`üîë Wallet inicializada: ${this.wallet.address}`);
      }

      // Inicializar contrato se endere√ßo for fornecido
      if (contractAddress && this.wallet) {
        this.contract = new ethers.Contract(contractAddress, this.contractABI, this.wallet);
        this.logger.log(`üìÑ Contrato inicializado: ${contractAddress}`);
        
        // Verificar se o contrato est√° implantado
        try {
          const totalServices = await this.contract.totalServices();
          this.logger.log(`‚úÖ Contrato VehicleServiceTracker ativo - Total de servi√ßos: ${totalServices}`);
        } catch (error) {
          this.logger.warn(`‚ö†Ô∏è Contrato n√£o encontrado ou n√£o implantado: ${contractAddress}`);
          this.logger.warn(`‚ö†Ô∏è Erro: ${error.message}`);
        }
      } else {
        this.logger.warn('‚ö†Ô∏è Contrato n√£o inicializado - endere√ßo ou wallet n√£o fornecidos');
      }

      this.logger.log('‚úÖ Servi√ßo Besu inicializado com sucesso');
    } catch (error) {
      this.logger.error('‚ùå Erro ao inicializar servi√ßo Besu:', error.message);
      throw error;
    }
  }

  /**
   * Registra um hash de evento veicular na blockchain
   * @param hash Hash do evento
   * @param vehicleId ID do ve√≠culo
   * @param eventType Tipo do evento
   * @returns Resultado do registro
   */
  async registerHash(
    hash: string,
    vehicleId: string,
    eventType: string
  ): Promise<{ success: boolean; transactionHash?: string; error?: string }> {
    try {
      if (!this.contract) {
        throw new Error('Contrato n√£o inicializado');
      }

      this.logger.log(`üìù Registrando hash: ${hash} para ve√≠culo: ${vehicleId}`);

      // Converter hash string para bytes32
      const hashBytes32 = ethers.keccak256(ethers.toUtf8Bytes(hash));

      // Registrar o hash no contrato
      const tx = await this.contract.registerHash(hash);
      
      this.logger.log(`‚è≥ Transa√ß√£o enviada: ${tx.hash}`);
      
      // Aguardar confirma√ß√£o
      const receipt = await tx.wait();
      
      this.logger.log(`‚úÖ Hash registrado com sucesso no bloco: ${receipt.blockNumber}`);

      return {
        success: true,
        transactionHash: tx.hash
      };
    } catch (error) {
      this.logger.error('‚ùå Erro ao registrar hash:', error.message);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Verifica se um servi√ßo existe na blockchain
   * @param serviceId ID do servi√ßo a ser verificado
   * @returns Informa√ß√µes do servi√ßo
   */
  async verifyService(serviceId: number): Promise<{
    exists: boolean;
    info?: {
      serviceId: number;
      vehicleId: string;
      mileage: number;
      cost: number;
      description: string;
      serviceType: string;
      timestamp: number;
      serviceProvider: string;
      isVerified: boolean;
    };
  }> {
    try {
      if (!this.contract) {
        throw new Error('Contrato n√£o inicializado');
      }

      const result = await this.contract.getService(serviceId);

      if (result && result.serviceId > 0) {
        return {
          exists: true,
          info: {
            serviceId: Number(result.serviceId),
            vehicleId: result.vehicleId,
            mileage: Number(result.mileage),
            cost: Number(result.cost),
            description: result.description,
            serviceType: result.serviceType,
            timestamp: Number(result.timestamp),
            serviceProvider: result.serviceProvider,
            isVerified: result.isVerified
          }
        };
      }

      return { exists: false };
    } catch (error) {
      this.logger.error('‚ùå Erro ao verificar servi√ßo:', error.message);
      return { exists: false };
    }
  }

  /**
   * Verifica se um hash foi registrado na blockchain (compatibilidade)
   * @param hash Hash a ser verificado
   * @returns Informa√ß√µes do hash
   */
  async verifyHash(hash: string): Promise<{
    exists: boolean;
    info?: {
      owner: string;
      timestamp: number;
      vehicleId: string;
      eventType: string;
      verificationCount: number;
    };
  }> {
    // Para compatibilidade, sempre retorna false pois o contrato n√£o tem verifyHash
    // Em um cen√°rio real, voc√™ implementaria a l√≥gica de verifica√ß√£o de hash
    this.logger.warn('‚ö†Ô∏è verifyHash n√£o implementado no contrato VehicleServiceTracker');
    return { exists: false };
  }

  /**
   * Incrementa contador de verifica√ß√µes de um hash
   * @param hash Hash a ser verificado
   * @returns Resultado da verifica√ß√£o
   */
  async verifyAndCount(hash: string): Promise<{ success: boolean; transactionHash?: string; error?: string }> {
    try {
      if (!this.contract) {
        throw new Error('Contrato n√£o inicializado');
      }

      const hashBytes32 = ethers.keccak256(ethers.toUtf8Bytes(hash));
      const tx = await this.contract.verifyAndCount(hashBytes32);
      
      await tx.wait();
      
      this.logger.log(`‚úÖ Verifica√ß√£o contabilizada: ${tx.hash}`);

      return {
        success: true,
        transactionHash: tx.hash
      };
    } catch (error) {
      this.logger.error('‚ùå Erro ao verificar e contar:', error.message);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Obt√©m todos os hashes de um ve√≠culo
   * @param vehicleId ID do ve√≠culo
   * @returns Array de hashes
   */
  async getVehicleHashes(vehicleId: string): Promise<string[]> {
    try {
      if (!this.contract) {
        throw new Error('Contrato n√£o inicializado');
      }

      const hashes = await this.contract.getVehicleHashes(vehicleId);
      return hashes;
    } catch (error) {
      this.logger.error('‚ùå Erro ao obter hashes do ve√≠culo:', error.message);
      return [];
    }
  }

  /**
   * Obt√©m todos os hashes de um propriet√°rio
   * @param ownerAddress Endere√ßo do propriet√°rio
   * @returns Array de hashes
   */
  async getOwnerHashes(ownerAddress: string): Promise<string[]> {
    try {
      if (!this.contract) {
        throw new Error('Contrato n√£o inicializado');
      }

      const hashes = await this.contract.getOwnerHashes(ownerAddress);
      return hashes;
    } catch (error) {
      this.logger.error('‚ùå Erro ao obter hashes do propriet√°rio:', error.message);
      return [];
    }
  }

  /**
   * Obt√©m estat√≠sticas do contrato
   * @returns Estat√≠sticas do contrato
   */
  async getContractStats(): Promise<{
    totalHashes: number;
    contractBalance: string;
  }> {
    try {
      if (!this.contract) {
        this.logger.warn('‚ö†Ô∏è Contrato n√£o inicializado, tentando inicializar...');
        await this.initializeBesu();
        
        if (!this.contract) {
          throw new Error('Contrato n√£o p√¥de ser inicializado');
        }
      }

      const [total, verified, balance] = await this.contract.getStats();
      const totalHashes = await this.contract.getRegisteredHashesCount();
      
      this.logger.log(`üìä Total de hashes no contrato: ${Number(totalHashes)}`);
      
      return {
        totalHashes: Number(totalHashes),
        contractBalance: ethers.formatEther(balance)
      };
    } catch (error) {
      this.logger.error('‚ùå Erro ao obter estat√≠sticas do contrato:', error.message);
      return {
        totalHashes: 0,
        contractBalance: '0'
      };
    }
  }

  /**
   * Obt√©m informa√ß√µes da rede Besu
   * @returns Informa√ß√µes da rede
   */
  async getNetworkInfo(): Promise<{
    chainId: number;
    blockNumber: number;
    gasPrice: string;
    networkName: string;
  }> {
    try {
      if (!this.provider) {
        this.logger.warn('‚ö†Ô∏è Provider n√£o inicializado, tentando inicializar...');
        await this.initializeBesu();
        
        if (!this.provider) {
          throw new Error('Provider n√£o p√¥de ser inicializado');
        }
      }

      const [network, blockNumber, feeData] = await Promise.all([
        this.provider.getNetwork(),
        this.provider.getBlockNumber(),
        this.provider.getFeeData()
      ]);

      return {
        chainId: Number(network.chainId),
        blockNumber,
        gasPrice: ethers.formatUnits(feeData.gasPrice || 0, 'gwei'),
        networkName: network.name
      };
    } catch (error) {
      this.logger.error('‚ùå Erro ao obter informa√ß√µes da rede:', error.message);
      throw error;
    }
  }

  /**
   * Verifica se o servi√ßo est√° conectado √† rede
   * @returns Status da conex√£o
   */
  async isConnected(): Promise<boolean> {
    try {
      if (!this.provider) {
        this.logger.warn('‚ö†Ô∏è Provider n√£o inicializado, tentando inicializar...');
        await this.initializeBesu();
        
        if (!this.provider) {
          return false;
        }
      }

      await this.provider.getBlockNumber();
      return true;
    } catch (error) {
      return false;
    }
  }

  /**
   * Verifica se um hash existe no contrato
   * @param hash Hash a ser verificado
   * @returns True se o hash existe no contrato
   */
  async verifyHashInContract(hash: string): Promise<boolean> {
    try {
      if (!this.contract) {
        this.logger.warn('‚ö†Ô∏è Contrato n√£o inicializado, tentando inicializar...');
        await this.initializeBesu();
        
        if (!this.contract) {
          throw new Error('Contrato n√£o p√¥de ser inicializado');
        }
      }

      // Verificar se o hash existe no contrato
      const exists = await this.contract.hashExists(hash);
      this.logger.log(`üîç Hash ${hash} existe no contrato: ${exists}`);
      return exists;
    } catch (error) {
      this.logger.error('‚ùå Erro ao verificar hash no contrato:', error.message);
      return false;
    }
  }

  /**
   * Obt√©m saldo de uma conta
   * @param address Endere√ßo da conta
   * @returns Saldo em ETH
   */
  async getBalance(address: string): Promise<string> {
    try {
      const balance = await this.provider.getBalance(address);
      return ethers.formatEther(balance);
    } catch (error) {
      this.logger.error('‚ùå Erro ao obter saldo:', error.message);
      return '0';
    }
  }
}
